  
/*
	  ___        _          _____             _ _   _              
	 / _ \      | |        /  ___|           (_) | (_)             
	/ /_\ \_   _| |_ ___   \ `--.  __ _ _ __  _| |_ _ _______ _ __ 
	|  _  | | | | __/ _ \   `--. \/ _` | '_ \| | __| |_  / _ \ '__|
	| | | | |_| | || (_) | /\__/ / (_| | | | | | |_| |/ /  __/ |   
	\_| |_/\__,_|\__\___/  \____/ \__,_|_| |_|_|\__|_/___\___|_|   
	 ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ 
	||G |||E |||O |||R |||G |||E |||& |||D |||I |||N |||O ||
	||__|||__|||__|||__|||__|||__|||__|||__|||__|||__|||__||
	|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|                 
    
    V 1.0 / April 2020 / Modul 242                           

==============================================================================

			FUNKTION

 ->	Beim auslösen des Sensors(PIR) wird ein Servo den Sprühkopf 2x drücken
	und es werden 2 ml ausgegeben.

 ->	Behälter hat 2 Liter / 0.002 Liter pro Betätigug = 1000 Betätigungen.
 
 ->	Auf dem Display werden die verbleibenden Benutzungen angezeigt.
 
 ->	Ein Knopf deint zum Reset der verbleibenden Benutzungen.
 
 ->	Potenziometer zur Kontraststeuerung des Displays.
 
 
==============================================================================
*/

#include <LiquidCrystal.h>
#include <Servo.h>
#define pirPin 10

Servo servo1;
int calibrationTime = 30;
int pos = 0;
int PIRValue = 0;
int i =0;
int rest =1000;
long unsigned int lowIn;
long unsigned int pause = 500;
boolean lockLow = true;
boolean takeLowTime;
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

void setup()
{
  servo1.attach(7);
  Serial.begin(9600);
  pinMode(pirPin, INPUT);
  lcd.begin(16, 2);
  lcd.print("Initializing...");
  
  while(i<=100)
  {
  	lcd.setCursor(0,1);
	lcd.print(i);
    lcd.setCursor(3,1);
    lcd.print("%");
    i++;
    delay(20);    	
  }
    delay(500);
  	lcd.setCursor(0,0);
  	lcd.print("Initializing...");
  	lcd.setCursor(0,1);
  	lcd.print("Complete !");
  	delay(500);
  	lcd.clear();
    rest_d();
    lcd.setCursor(0,0);
    lcd.print("AutoSanitizer");
}

void loop()
{
  PIRSensor();
}

void PIRSensor()
{
  if(digitalRead(pirPin) == HIGH)
  {
    if(lockLow)
    {
      PIRValue = 1;
      lockLow = false;
      lcd.clear();
	  lcd.setCursor(0,0);
      lcd.print("Motion detected.");
      rest_d();
      delay(1000);
      lcd.clear();
      servo();
      delay(50);
     }
      takeLowTime = true;
    
   }
  if(digitalRead(pirPin) == LOW)
  {
    if(takeLowTime)
    {
      lowIn = millis();takeLowTime = false;
    }
      if(!lockLow && millis() - lowIn > pause)
      {
         PIRValue = 0;
         lockLow = true;
         lcd.clear();
         lcd.setCursor(0,0);
         lcd.print("Motion ended.");
         rest_d();
         delay(50);
         lcd.setCursor(0,0);
         lcd.print("AutoSanitizer");
      }
   }
}

void servo()
{
  for (pos = 0; pos <= 90; pos += 1)
  { 
    servo1.write(pos);              
    delay(15);                       
  }
  for (pos = 90; pos >= 0; pos -= 1)
  { 
    servo1.write(pos);              
    delay(15);  
  }
   for (pos = 0; pos <= 90; pos += 1)
  { 
    servo1.write(pos);              
    delay(15);                       
  }
  rest--;
    
}

void rest_d()
{
  lcd.setCursor(0, 1);
  lcd.print("Left: ");
  lcd.setCursor(7, 1);
  lcd.print(rest);
   lcd.setCursor(11, 1);
  lcd.print("/1000");
}
